/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dataanalyzer.dialog;

import com.arib.toast.Toast;
import dataanalyzer.CategoricalHashMap;
import dataanalyzer.Installer;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.ListModel;

/**
 *
 * @author aribdhuka
 */
public class VitalsEditDialog extends javax.swing.JDialog {
    
    
    ArrayList<Vital> vitals;
    CategoricalHashMap dataMap;
    /**
     * Creates new form VitalsEditDialog
     */
    public VitalsEditDialog(java.awt.Frame parent, boolean modal, ArrayList<Vital> vitals, CategoricalHashMap dataMap) {
        super(parent, modal);
        initComponents();
        this.vitals = vitals;
        this.dataMap = dataMap;
        buildList();
        setupSave();
    }
    
    public VitalsEditDialog(JDialog parent, boolean modal, ArrayList<Vital> vitals, CategoricalHashMap dataMap) {
        super(parent,modal);
        initComponents();
        this.vitals = vitals;
        this.dataMap = dataMap;
        buildList();
        setupSave();
    }
 
    private void buildList() {
        String[] vitalData = new String[vitals.size()];
        for(int i = 0; i < vitalData.length; i++) {
            vitalData[i] = vitals.get(i).toHumanReadable();
        }
        vitalsList.setListData(vitalData);
    }
    
    private void setupSave() {
        this.addWindowListener(new WindowAdapter() {
            
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);
                FileOutputStream fos = null;
                try {
                    //save / update vitals file
                    //get filepath from installer
                    String vitalsPath = Installer.getHomePath() + "Vitals/vitals.dfrvit";
                    fos = new FileOutputStream(new File(vitalsPath));
                    for(Vital vital : vitals) {
                        fos.write(vital.toString().getBytes());
                        fos.write("\n".getBytes());
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(VitalsEditDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(VitalsEditDialog.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        fos.close();
                    } catch (IOException ex) {
                        Logger.getLogger(VitalsEditDialog.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
            }
            
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        vitalsList = new javax.swing.JList<>();
        importVitlasButton = new javax.swing.JButton();
        exportVitalsButton = new javax.swing.JButton();
        addVitalsButton = new javax.swing.JButton();
        editVitalsButton = new javax.swing.JButton();
        deleteVitalsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        vitalsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(vitalsList);

        importVitlasButton.setText("Import");

        exportVitalsButton.setText("Export");

        addVitalsButton.setText("Add");
        addVitalsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVitalsButtonActionPerformed(evt);
            }
        });

        editVitalsButton.setText("Edit");
        editVitalsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editVitalsButtonActionPerformed(evt);
            }
        });

        deleteVitalsButton.setText("Delete");
        deleteVitalsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteVitalsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(editVitalsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteVitalsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addVitalsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(importVitlasButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportVitalsButton)
                        .addGap(0, 439, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importVitlasButton)
                    .addComponent(exportVitalsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addVitalsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editVitalsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteVitalsButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addVitalsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVitalsButtonActionPerformed
        Vital newVital = new Vital();
        new NewVitalDialog(this, newVital, dataMap).setVisible(true);
        if(newVital != null) {
            vitals.add(newVital);
            buildList();
        }
    }//GEN-LAST:event_addVitalsButtonActionPerformed

    private void editVitalsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editVitalsButtonActionPerformed
        // TODO add your handling code here:
        int index = vitalsList.getSelectedIndex();
        Vital vital = vitals.get(index);
        new NewVitalDialog(this, vital, dataMap).setVisible(true);
        buildList();
    }//GEN-LAST:event_editVitalsButtonActionPerformed

    private void deleteVitalsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteVitalsButtonActionPerformed
        // TODO add your handling code here:
        int index = vitalsList.getSelectedIndex();
        //unselect list
        vitalsList.setSelectedIndex(Integer.MAX_VALUE);
        vitals.remove(index);
        buildList();
        
    }//GEN-LAST:event_deleteVitalsButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addVitalsButton;
    private javax.swing.JButton deleteVitalsButton;
    private javax.swing.JButton editVitalsButton;
    private javax.swing.JButton exportVitalsButton;
    private javax.swing.JButton importVitlasButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> vitalsList;
    // End of variables declaration//GEN-END:variables
}
