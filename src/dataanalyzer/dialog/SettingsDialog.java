/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dataanalyzer.dialog;

import dataanalyzer.Settings;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.WindowConstants;

/**
 *
 * @author aribdhuka
 */
public class SettingsDialog extends javax.swing.JDialog {
    
    //settings object
    Settings settings;
    //holds if the window is being closed from apply or cancel button
    private boolean applyOrCancel;
    /**
     * Creates new form SettingsDialog
     */
    public SettingsDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        //declare the window is not being closed by the buttons
        applyOrCancel = false;
        //creates window
        initComponents();
        //get current settings
        settings = Settings.getInstance();
        //initialize selection boxes and their values
        initComboBoxes();
        //intialize the values for every setting
        initValues();
        //do nothing on window close so that we can override it
        this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        //add a listener to the window closing action
        this.addWindowListener(new WindowAdapter() {
            //before the window is closed
            public void windowClosing(WindowEvent ev) {
                //see if its being closed by something that is not the apply or cancel buttons
                if(!applyOrCancel) {
                    //TODO: see if any changes have actually been made
                    Settings s = Settings.getInstance();
                    if(settings.equals(s))
                        //Make the user confirm that the window should be closed
                        if(dataanalyzer.DataAnalyzer.createConfirmDialog("Close", "Unsaved Changed. Confirm Close?"))
                            //if user accepts, then dispose
                            ev.getWindow().dispose();
                }
            }
        });
    }
    
    public void initComboBoxes() {
        //init spinners
        preferredThemeComboBox.setModel(new DefaultComboBoxModel<>(new String[] {"Default", "System", "Dark"}));
        alwaysApplyPostProcessingComboBox.setModel(new DefaultComboBoxModel<>(new String[] {"Always", "Ask", "Never"}));
    }
    
    public void initValues() {
        //apply values from settings
        autoCheckForUpdates.setSelected(settings.getSetting("AutoCheckForUpdates").equals("true"));
        preferredThemeComboBox.setSelectedItem(settings.getSetting("PreferredTheme"));
        alwaysApplyPostProcessingComboBox.setSelectedItem(settings.getSetting("AlwaysApplyPostProcessing"));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        applyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        autoCheckForUpdates = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        preferredThemeComboBox = new javax.swing.JComboBox<>();
        alwaysApplyPostProcessingComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        applyButton.setBackground(new java.awt.Color(0, 122, 255));
        applyButton.setText("Apply");
        applyButton.setToolTipText("");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        autoCheckForUpdates.setText("Auto Check For Updates");

        jLabel1.setText("Preferred Theme");

        jLabel2.setText("Always Apply Post Processing");

        preferredThemeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        alwaysApplyPostProcessingComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(applyButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(autoCheckForUpdates)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(preferredThemeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(alwaysApplyPostProcessingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 201, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(autoCheckForUpdates)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(preferredThemeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alwaysApplyPostProcessingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        //set the settings to the settings object
        settings.setSetting("PreferredTheme", preferredThemeComboBox.getSelectedItem().toString());
        settings.setSetting("AutoCheckForUpdates", autoCheckForUpdates.isSelected() + "");
        settings.setSetting("AlwaysApplyPostProcessing", alwaysApplyPostProcessingComboBox.getSelectedItem().toString());
        //tell the settings to update the file
        settings.save();
        //declare that the window is being closed by the apply buttone
        applyOrCancel = true;
        //dispose this window
        this.dispose();
    }//GEN-LAST:event_applyButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        //if cancel is pressed, dispose window
        //TODO: see if changes are made and confirm with user
        Settings s = Settings.getInstance();
        if(settings.equals(s))
            applyOrCancel = false;
        else
            applyOrCancel = true;
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> alwaysApplyPostProcessingComboBox;
    private javax.swing.JButton applyButton;
    private javax.swing.JCheckBox autoCheckForUpdates;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox<String> preferredThemeComboBox;
    // End of variables declaration//GEN-END:variables
}
