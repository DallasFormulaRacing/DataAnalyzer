/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dataanalyzer;

import dataanalyzer.data.CategoricalHashMap;
import dataanalyzer.data.LogObject;
import dataanalyzer.data.SimpleLogObject;
import java.util.LinkedList;
import java.util.List;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.UIManager;

/**
 *
 * @author aribdhuka
 */
public class VitalsDialog extends javax.swing.JDialog {

    JPanel mainPanel;
    /**
     * Creates new form VitalsDialog
     */
    public VitalsDialog(java.awt.Frame parent, boolean modal, CategoricalHashMap dataMap) {
        super(parent, modal);
        initComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        this.setContentPane(mainPanel);
        mainPanel.setVisible(true);
        runVitals(dataMap);
        
    }
    
    /**
     * Creates new form VitalsDialog
     */
    public VitalsDialog(java.awt.Frame parent, boolean modal, LinkedList<CategoricalHashMap> dataMap) {
        super(parent, modal);
        initComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        this.setContentPane(mainPanel);
        mainPanel.setVisible(true);
        runVitals(dataMap);
        
    }
    
    private void addLog(String text) {
        Box box = Box.createHorizontalBox();
        JLabel image = new JLabel();
        image.setIcon(UIManager.getIcon("OptionPane.informationIcon"));
        box.add(image);
        box.add(new JLabel(text));
        box.setVisible(true);
        mainPanel.add(box);
    }

    private void addError(String text) {
        Box box = Box.createHorizontalBox();
        JLabel image = new JLabel();
        image.setIcon(UIManager.getIcon("OptionPane.errorIcon"));
        box.add(image);
        box.add(new JLabel(text));
        box.setVisible(true);
        mainPanel.add(box);
    }
    
    private void addWarning(String text) {
        Box box = Box.createHorizontalBox();
        JLabel image = new JLabel();
        image.setIcon(UIManager.getIcon("OptionPane.warningIcon"));
        box.add(image);
        box.add(new JLabel(text));
        box.setVisible(true);
        mainPanel.add(box);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
      
    //Oil pressures
    private static final int    OIL_PRESSURE_LOW        = 45;
    private static final int    OIL_PRESSURE_HIGH       = 90;
    
    //coolant temperatures
    private static final int    COOLANT_TEMP_HIGH       = 212;
    
    //battery Voltages
    private static final double BATTERY_VOLTS_LOW       = 12.0;
    private static final double BATTERY_VOLTS_HIGH      = 15.0;
    
    //Oil pressures
    private static final int    RPM_LOW                 = 0;
    private static final int    RPM_HIGH                = 12500;
    
    //Ignition Angle 
    private static final double    IGN_ANGLE_LOW        = 10;
    private static final double    IGN_ANGLE_HIGH       = 35;
    
    //Throttle Position 
    private static final double    TPS_LOW              = 0;
    private static final double    TPS_HIGH             = 100;
    
    //AFR
    private static final double    AFR_LOW              = 10.4;
    private static final double    AFR_HIGH             = 22.06;
    
    private void runVitals(List<CategoricalHashMap> dataMaps) {
        for(CategoricalHashMap dataMap : dataMaps)
            runVitals(dataMap);
    }
    
    /**
     * Checks all data signals for anomalies and auto diagnoses issues
     * @param parent JFrame to spawn dialog from
     * @param dataMap dataMap to analyze
     */
    private void runVitals(CategoricalHashMap dataMap) {
        if(dataMap.getTags().contains("Time,OilPressure")) {
            checkOilPressure(dataMap.getList("Time,OilPressure"));
        }
        if(dataMap.getTags().contains("Time,CoolantTemp")) {
            checkCoolantTemp(dataMap.getList("Time,CoolantTemp"));
        }
        if(dataMap.getTags().contains("Time,BatteryVolt")) {
            checkBatteryVoltage(dataMap.getList("Time,BatteryVolt"));
        }
        if(dataMap.getTags().contains("Time,RPM")) {
            checkEngineRPM(dataMap.getList("Time,RPM"));
        }
        if(dataMap.getTags().contains("Time,IgnitionAngle")) {
            checkIgnitionAngle(dataMap.getList("Time,IgnitionAngle"));
        }
        if(dataMap.getTags().contains("Time,TPS")) {
            checkThrottlePosition(dataMap.getList("Time,TPS"));
        }
        if(dataMap.getTags().contains("Time,AFRAveraged")) {
            checkAFR(dataMap.getList("Time,AFRAveraged"));
        }
        
        
    }
    
    private void checkOilPressure(LinkedList<LogObject> oilPressures) {
        //for each object check for low and high pressures
        boolean low = false, high = false;
        for(LogObject lo : oilPressures) {
            if(((SimpleLogObject) lo).getValue() < OIL_PRESSURE_LOW) {
                low = true;
            }
            if(((SimpleLogObject) lo).getValue() > OIL_PRESSURE_HIGH) {
                high = true;
            }
        }
        
        if(low)
            addError("Oil Pressure Low!");
        else if(high)
            addWarning("Oil Pressure High!");
        else if(low && high)
            addError("Oil Pressure Low and High!");
        else
            addLog("Oil Pressure Ok.");
        
    }
    
    private void checkCoolantTemp(LinkedList<LogObject> coolantTemp) {
        for(LogObject lo : coolantTemp) {
            if(((SimpleLogObject) lo).getValue() > COOLANT_TEMP_HIGH) {
                addError("Coolant Temp High!");
            }
        }
        
        addLog("Coolant Temp Ok.");
    }
    
    private void checkBatteryVoltage(LinkedList<LogObject> batteryVoltage) {
        //for each object check for low and high pressures
        boolean low = false, high = false;
        for(LogObject lo : batteryVoltage) {
            //ignore first 10 seconds of data
            if(lo.getTime() < 10000)
                continue;
            if(((SimpleLogObject) lo).getValue() < BATTERY_VOLTS_LOW) {
                low = true;
            }
            if(((SimpleLogObject) lo).getValue() > BATTERY_VOLTS_HIGH) {
                high = true;
            }
        }
        
        if(low)
            addWarning("Battery Voltage Low!");
        else if(high)
            addError("Battery Voltage High!");
        else if(low && high)
            addError("Battery Voltage Low and High!");
        else
            addLog("Battery Voltage Ok.");
    }
    
    private void checkEngineRPM(LinkedList<LogObject> RPM) {
        //for each object check for low and high pressures
        boolean low = false, high = false;
        for(LogObject lo : RPM) {
            if(((SimpleLogObject) lo).getValue() < RPM_LOW) {
                low = true;
            }
            if(((SimpleLogObject) lo).getValue() > RPM_HIGH) {
                high = true;
            }
        }
        
        if(low)
            addLog("This idiot stalled!");
        else if(high)
            addWarning("Exceeding Rev Limiter!");
        else if(low && high)
            addWarning("Stall + Exceeding Rev Limiter!");
        else
            addLog("RPMs Ok.");
    }
    
    private void checkIgnitionAngle(LinkedList<LogObject> ignAngle) {
        //for each object check for low and high pressures
        boolean low = false, high = false;
        for(LogObject lo : ignAngle) {
            if(((SimpleLogObject) lo).getValue() < IGN_ANGLE_LOW) {
                low = true;
            }
            if(((SimpleLogObject) lo).getValue() > IGN_ANGLE_HIGH) {
                high = true;
            }
        }
        
        if(low)
            addWarning("Ignition Angle too retarded!");
        else if(high)
            addWarning("Ignition Angle too advanced!");
        else if(low && high)
            addWarning("Ignition Angle too retarded and too advanced!");
        else
            addLog("Igniition Angle Ok.");
    }
    
    private void checkThrottlePosition(LinkedList<LogObject> tps) {
        //for each object check for low and high pressures
        boolean low = false, high = false;
        double lowest = 100;
        for(LogObject lo : tps) {
            if(((SimpleLogObject) lo).getValue() < lowest) {
                lowest = ((SimpleLogObject) lo).getValue();
            }
            if(((SimpleLogObject) lo).getValue() < TPS_LOW) {
                low = true;
            }
            if(((SimpleLogObject) lo).getValue() > TPS_HIGH) {
                high = true;
            }
        }
        
        if(low)
            addError("Throttle Position Sensor Malfunction! Reading Low.");
        else if(high)
            addError("Throttle Position Sensor Malfunction! Reading High.");
        else if(low && high)
            addError("Throttle Position Sensor Malfunction! Reading High and Low.");
        else {
            if(lowest != 0)
                addWarning("TPS Ok. Possibly miscalibrated.");
            else
                addLog("TPS Ok. Calibration Ok.");
        }
    }
    
    private void checkAFR(LinkedList<LogObject> afr) {
        //for each object check for low and high pressures
        boolean low = false, high = false;
        for(LogObject lo : afr) {
            if(((SimpleLogObject) lo).getValue() < AFR_LOW) {
                low = true;
            }
            if(((SimpleLogObject) lo).getValue() > AFR_HIGH) {
                high = true;
            }
        }
        
        if(low)
            addWarning("AFR Sensor reading low!");
        else if(high)
            addWarning("AFR Sensor reading high!");
        else if(low && high)
            addWarning("AFR Sensor reading too high and too low!");
        else
            addLog("AFR Sensor Ok.");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
