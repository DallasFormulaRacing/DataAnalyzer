/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dataanalyzer.readout;


import dataanalyzer.ChartManager;
import dataanalyzer.Dataset;
import dataanalyzer.LogObject;
import dataanalyzer.SimpleLogObject;
import dataanalyzer.Valueable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author arib
 */
public class ReadoutPanel extends javax.swing.JPanel {

    ChartManager chartManager;
    /**
     * Creates new form ReadoutPanel
     * @param chartManager
     */
    public ReadoutPanel(ChartManager chartManager) {
        initComponents(); 
        this.chartManager = chartManager;
       
        LinkedList<Dataset> datasets = this.chartManager.getDatasets();
        String[] datasetNames = new String[datasets.size()];
        for(int i = 0; i < datasetNames.length; i++) {
            datasetNames[i] = datasets.get(i).getName();
        }
        datasetComboBox.setModel(new DefaultComboBoxModel<>(datasetNames));
        
        updateTable(0);
    }
    
    public void updateTable(double xCor) {
        Dataset chosenDataset = chartManager.getDataset(datasetComboBox.getSelectedItem() + "");
        
        //create a 2-d array of 2 columns and "tag size" rows
        Object[][] data = new Object[chosenDataset.getDataMap().getTags().size()][2];
        for(int r = 0; r < data.length; r++) {
            String tag = chosenDataset.getDataMap().getTags().get(0);
            data[r][0] = tag;
            //need to find and interpolate data
            LinkedList<LogObject> dataList = chosenDataset.getDataMap().getList(tag);
            
            double upperdom = 0;
            double lowerdom = 0;
            double upperval = 0;
            double lowerval = 0;
            for(LogObject lo : dataList) {
                if(lo.getTime() < xCor) {
                    lowerdom = lo.getTime();
                    if(lo instanceof Valueable)
                        lowerval = ((Valueable) lo).getValue();
                } else {
                    upperdom = lo.getTime();
                    if(lo instanceof Valueable)
                        upperval = ((Valueable) lo).getValue();
                    break;
                }
            }
            
            //now that we have dom and value, interpolate
            data[r][1] = (lowerval * (upperdom - xCor) + upperval * (xCor - lowerdom)) / (upperdom - lowerdom);
        }
        
        
        Object[] columnNames = new String[2];
        columnNames[0] = "Tag";
        columnNames[1] = "Value";
        
        
        DefaultTableModel tableModel = new DefaultTableModel(data, columnNames);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        readoutTable = new javax.swing.JTable();
        datasetComboBox = new javax.swing.JComboBox<>();

        readoutTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Tag", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(readoutTable);

        datasetComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(datasetComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(datasetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> datasetComboBox;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable readoutTable;
    // End of variables declaration//GEN-END:variables
}
